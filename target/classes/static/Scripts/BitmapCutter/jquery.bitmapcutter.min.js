window.$bcglobal = { $originalSize: { width: 0, top: 0 }, $zoomValue: 1.0, $thumbimg: null, $img: null, $cutter: null }; $.extend($.fn, { f: function (c) { return parseInt($(this).css(c)) }, loadBitmap: function (callback) { var me = this, bitmapCutterHolder = new Image(), src = me.attr('rel'); bitmapCutterHolder.src = src; this.onCompleted = function () { $(me).attr('src', src); $bcglobal.$originalSize = { width: bitmapCutterHolder.width, height: bitmapCutterHolder.height }; callback(src) }; if ($.browser.msie) { if (bitmapCutterHolder.readyState == "complete") { me.onCompleted() } else bitmapCutterHolder.onreadystatechange = function () { if (this.readyState == "complete") { me.onCompleted() } } } else { bitmapCutterHolder.onload = me.onCompleted } }, scaleBitmap: function () { return this.each(function () { var me = $(this), os = $bcglobal.$originalSize, zoomValue = $bcglobal.$zoomValue; me.hide(); if (os.width > 0 && os.height > 0) { me.height(os.height * zoomValue).width(os.width * zoomValue) } var p = me.parent(), w = me.width(), h = me.height(), t = (p.height() - h) / 2, l = (p.width() - w) / 2; me.css({ 'top': t, 'left': l }).show() }) }, dragndrop: function (setting) { var ps = $.fn.extend({ limited: { lw: { min: 0, max: 100 }, th: { min: 0, max: 100} }, handler: null, callback: function () { } }, setting); var dragndrop = { drag: function (e) { var d = e.data.d; var p = { left: Math.min(Math.max(e.pageX + d.left, ps.limited.lw.min), ps.limited.lw.max), top: Math.min(Math.max(e.pageY + d.top, ps.limited.th.min), ps.limited.th.max), target: d.target }; ps.callback(p) }, drop: function () { $("#cutterDiv").unbind('mousemove', dragndrop.drag).unbind('mouseup', dragndrop.drop) } }; return this.each(function () { if (ps.handler == null) { ps.handler = $(this) }; var handler = (typeof ps.handler == 'string' ? $(ps.handler) : ps.handler); handler.bind('mousedown', function (e) { var data = { target: $(this), left: $(this).f('left') - e.pageX, top: $(this).f('top') - e.pageY }; $("#cutterDiv").bind('mousemove', { d: data }, dragndrop.drag).bind('mouseup', dragndrop.drop) }) }) }, bitmapCutter: function (settings) { var lang = { zoomout: '缩小', zoomin: '放大', original: '原始大小', clockwise: '顺时针旋转({0} 度)', counterclockwise: '逆时针旋转({0} 度)', generate: '生成缩图', process: '请稍等，处理中……', left: '左', right: '右', up: '上', down: '下' }; var ps = $.fn.extend({ src: '', thumbnailPath: '', renderTo: $(document.body), holderSize: { width: 300, height: 300 }, cutterSize: { width: 100, height: 100 }, zoomStep: 0.2, zoomIn: 2.0, zoomOut: 0.1, rotateAngle: 90, moveStep: 100, onGenerated: function () { }, lang: lang }, settings); ps.lang = $.extend(lang, ps.lang); ps.lang.clockwise = ps.lang.clockwise.format(ps.rotateAngle); ps.lang.counterclockwise = ps.lang.counterclockwise.format(ps.rotateAngle); function izoom(zv) { $bcglobal.$zoomValue = zv; $bcglobal.$img.scaleBitmap($bcglobal.$zoomValue); $bcglobal.$thumbimg.scaleBitmap($bcglobal.$zoomValue); scissors.createThumbnail() } function irotate(angle) { var img = $bcglobal.$img; var thumbimg = $bcglobal.$thumbimg; var zoomValue = $bcglobal.$zoomValue; var src = img.attr('rel'); $.ajax({ url: '/scissors.axd', dataType: 'json', data: { action: 'RotateBitmap', src: src, angle: angle, t: Math.random() }, error: function () { alert('rotate failed!') }, success: function (json) { if (json.msg == 'success') { $bcglobal.$originalSize = json.size; src += '?t=' + Math.random(); img.attr('src', src).scaleBitmap(); thumbimg.attr('src', src).scaleBitmap(); scissors.createThumbnail() } else { alert(json.msg) } } }) } function imove(direction) { var thumbimg = $bcglobal.$thumbimg; var img = $bcglobal.$img; var cutter = $bcglobal.$cutter; var w = img.width(); var h = img.height(); var l = img.f('left'); var t = img.f('top'); if (w <= ps.holderSize.width && h <= ps.holderSize.height) { return } var limited = { left: { min: Math.min(ps.holderSize.width - w, 0), max: Math.max(ps.holderSize.width - w, 0) }, top: { min: Math.min(ps.holderSize.height - h, 0), max: Math.max(ps.holderSize.height - h, 0)} }; if (!img.is(':animated')) { thumbimg.fadeOut(); var v = 0, d = {}; switch (direction) { case 'left': v = Math.min(limited.left.max, l + ps.moveStep); d = { left: v }; break; case 'right': v = Math.max(limited.left.min, l - ps.moveStep); d = { left: v }; break; case 'up': v = Math.min(limited.top.max, t + ps.moveStep); d = { top: v }; break; case 'down': v = Math.max(limited.top.min, t - ps.moveStep); d = { top: v }; break } img.animate(d, function () { thumbimg.fadeIn(); scissors.createThumbnail() }) } } var scissors = { createThumbnail: function () { var thumbimg = $bcglobal.$thumbimg, img = $bcglobal.$img, cutter = $bcglobal.$cutter; thumbimg.css({ 'left': -cutter.f('left') + img.f('left'), 'top': -cutter.f('top') + img.f('top') }) }, zoomin: function () { izoom.call(this, Math.min($bcglobal.$zoomValue + ps.zoomStep, ps.zoomIn)) }, zoomout: function () { izoom.call(this, Math.max($bcglobal.$zoomValue - ps.zoomStep, ps.zoomOut)) }, original: function () { izoom.call(this, 1, 1) }, clockwise: function () { irotate.call(this, ps.rotateAngle) }, counterclockwise: function () { irotate.call(this, -ps.rotateAngle) }, left: function () { imove.call(this, 'left') }, up: function () { imove.call(this, 'up') }, right: function () { imove.call(this, 'right') }, down: function () { imove.call(this, 'down') } }; ps.renderTo = (typeof ps.renderTo == 'string' ? $(ps.renderTo) : ps.renderTo); var $cl = $('<div class="jquery-bitmapcutter-cl" onselectstart="return false;"></div>').appendTo(ps.renderTo); var $cr = $('<div class="jquery-bitmapcutter-cr"></div>').appendTo(ps.renderTo); var $holder = $('<div class="jquery-bitmapcutter-holder jquery-loader" />').css(ps.holderSize).appendTo($cl); var $opts = $('<div class="jquery-bitmapcutter-opts" >' + '<div class="r1c1"><a href="javascript:void(0)" onfocus="this.blur()" class="up">&nbsp</a></div>' + '<div class="r2c1">' + '<a href="javascript:void(0)" onfocus="this.blur()" class="zoomout">&nbsp</a>' + '<a href="javascript:void(0)" onfocus="this.blur()" class="zoomin">&nbsp</a>' + '<a href="javascript:void(0)" onfocus="this.blur()" class="left">&nbsp</a>' + '<a href="javascript:void(0)" onfocus="this.blur()" class="original">&nbsp</a>' + '<a href="javascript:void(0)" onfocus="this.blur()" class="right">&nbsp</a>' + '<a href="javascript:void(0)" onfocus="this.blur()" class="counterclockwise">&nbsp</a>' + '<a href="javascript:void(0)" onfocus="this.blur()" class="clockwise">&nbsp</a>' + '</div>' + '<div class="r3c1"><a href="javascript:void(0)" onfocus="this.blur()" class="down">&nbsp</a></div>' + '</div>').insertAfter($holder); $opts.css('width', ps.holderSize.width).find('div.r2c1>a:eq(0)').css('margin-left', (ps.holderSize.width - (16 + 6) * 7 + 3) / 2); var $cutter = $('<div id="cutterDiv" class="jquery-bitmapcutter-cutter" >&nbsp</div>').css(ps.cutterSize).css({ 'opacity': .4, 'left': (ps.holderSize.width - ps.cutterSize.width) / 2, 'top': (ps.holderSize.height - ps.cutterSize.height) / 2 }).appendTo($holder); $bcglobal.$zoomValue = 1; var $img = $('<img alt="" rel="' + ps.src + '" />').appendTo($holder); var $thumbimg = $('<img id="bitmapcutterCr" alt="" rel="' + ps.src + '" />').appendTo($('<div class="jquery-bitmapcutter-thumbnail" />').css(ps.cutterSize).appendTo($cr)); var $generate = $('<a href="javascript:void(0)" class="generate" onfocus="this.blur()" >' + ps.lang.generate + '</a>').appendTo($cr); var $newimg = $('<img class="jquery-bitmapcutter-newimg" alt="" src="" />').appendTo($cr).hide(); var $processed = $('<div class="process">' + ps.lang.process + '</div>').hide().appendTo($cr); $img.loadBitmap(function () { $img.scaleBitmap(); $holder.removeClass('jquery-loader'); var ks = { k37: 'left', k38: 'up', k39: 'right', k40: 'down', k45: 'zoomout', k61: 'zoomin' }; $().keypress(function (e) { var k = (e.keyCode || e.which); if ((k >= 37 && k <= 40) || k == 45 || k == 61) { var func = eval('scissors.' + eval('(ks.k' + k + ')') + ''); func() } }); $thumbimg.attr('src', $img.attr('src')).scaleBitmap(); $opts.find('a').each(function () { var me = $(this), c = me.attr('class'); me.attr('title', eval('(ps.lang.' + c + ')')).bind('click', eval('(scissors.' + c + ')')) }); $cutter.dragndrop({ limited: { lw: { min: 0, max: ps.holderSize.width - ps.cutterSize.width }, th: { min: 0, max: ps.holderSize.height - ps.cutterSize.height} }, callback: function (e) { $cutter.css({ left: e.left, top: e.top }); scissors.createThumbnail() } }); $generate.click(function () { var me = $(this); me.fadeOut(); $opts.fadeOut(); $cutter.fadeOut(); $processed.fadeIn(); $.ajax({ url: '/scissors.axd', dataType: 'json', data: { action: 'GenerateBitmap', src: ps.src, zoom: $bcglobal.$zoomValue, x: $thumbimg.f('left'), y: $thumbimg.f('top'), width: ps.cutterSize.width, height: ps.cutterSize.height, path: ps.thumbnailPath, t: Math.random() }, error: function () { alert('cant generate it!') }, success: function (json) { if (json.msg == 'success') { me.fadeIn(); $opts.fadeIn(); $cutter.fadeIn(); $processed.fadeOut(); $newimg.attr('src', json.src).show(); ps.onGenerated(json.src) } else { alert(json.msg) } } }) }); $bcglobal.$cutter = $cutter; $bcglobal.$img = $img; $bcglobal.$thumbimg = $thumbimg }) } }); String.prototype.format = function () { var args = arguments; return this.replace(/{(\d{1})}/g, function () { return args[arguments[1]] }) };